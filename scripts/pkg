#!/usr/bin/env bash
#darwin /usr/bin/sandbox-exec -f /private/tmp/homebrew20201014-38120-afnjzi.sb nice ruby -W0 -I $LOAD_PATH
#linux chroot jail 
#cmake -LAH to see all variables
SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

source "$SCRIPT_DIR/log"

# pkg_patchakra dir_patches 
pkg_patchakra() {
  local os=$HOST_OS
  local patches=$1
  
  if [ ! -d $1 ]; then 
    return 0
  fi

  log "Looking for patches to apply... in $1"

  for patch in $patches; do
    local apply=false
    local chunks=$(echo $patch | tr '-' ' ')
    set -- $chunks
    local criterias=$(echo $1 | tr '_' ' ')
    local desc=$2
    set -- $criterias

    # Version criteria
    if [[ "$2" =~ ^([\<\>\=])([0-9]+)(\.[0-9]+)*$ ]]; then
      local version="${2:1}"
      local matcher="${2:0:1}"
      if semver "$(os_dist_version) $matcher $version"; then
        apply=true  
      fi
    fi; 

    if [ $apply = true ];then
        patch -p0 -Nb < $patch
        if [ $? -eq 0 ]; then
          log --ok "Applied patch $patch"
        else
          log --err "Error when apply patch $patch"
          log_errexit "The process can't continue due a patch couldn't be able to be applied"
        fi
    fi 
  done 
}



pkg_config_read_value() {
  local fd varname tokens temp found
  local btokens="$(tr ' ' '|' <<<$PKG_CONFIG_BLOCK_TOKENS)"
  
  if [ -t 0 ] || [ -e "$1" ] && [[ "$1" == "/"* ]]; then
    fd=$1
    varname="$2"
    tokens="${@:3}"
  else
    varname="$1"
    tokens="${@:2}"
  fi

  if [ -z $tokens ]; then
    tokens="$btokens"
  else
    tokens="$(tr ' ' '|' <<<$tokens)|$btokens"
  fi
  
  while IFS= read line; do
    set -- $line
    if [[ "$1" =~ ^($tokens)$ ]]; then
      if [[ "$1" == "$varname" ]]; then
        found=1
        echo "${@:2}"
      elif [ ! -z "$found" ]; then
        break
      fi
    elif [ ! -z "$found" ]; then
      echo "$line"
    fi
  done < <(cat $fd)
}

pkg_config_interpolate() {
  # the variables must be accesible from top to bottom 
  # defining in order os use
  local fd ctoken bcontent 
  local varexp varname varvalue
  local tokens
  local regex='\#\{([a-z]+)\}'

  if [ -t 0 ] || [ -e "$1" ]; then
    fd=$1
    tokens="${@:2}"
  else
    tokens="$@"
  fi
  
  while IFS='' read line; do
    s="$line"
    while [[ $line =~ $regex ]]; do
      varexp="${BASH_REMATCH[0]}"
      varname="${BASH_REMATCH[1]}"
      varvalue="$(echo -ne "$bcontent" | pkg_config_read_value "$varname" "$tokens")"
      if [ -z "$varvalue" ]; then
        log_errexit "Missing token $varexp"
        exit 1 
      fi
      line="${line//$varexp/$varvalue}"
      s="${s#*"${BASH_REMATCH[1]}"}"
    done
    if [ -z "$bcontent" ]; then 
      bcontent="$(printf '%s\n' "$line")"
    else
      bcontent="$(printf '%s\n%s' "$bcontent" "$line")"
    fi
    echo -ne "$line\n"
  done < <(cat $fd)
}

pkg_args_to_config() {
  while [[ $# -gt 0 ]]; do 
    case $1 in
      --|-)
        shift 1
      ;;
      --*|-*)
        if [[ "$1" =~ ^-- ]]; then
          varname=${1#"--"}
        else
          varname=${1#"-"}
        fi

        if [[ "$2" =~ ^--? ]] || [ -z "$2" ]; then
          echo "$varname true"
        else
          echo "$varname $2"
        fi
      ;;
    esac
    shift 1
  done
}

pkg_config_parse() {
  local fd args largs pkgconfig envconfig pkgname skip_os line tokens
  local tagpattern='^(\[([a-z0-9_-]+)\])$'

  if [ -t 0 ] || [ -e "$1" ]; then
    fd=$1
    args="${@:2}"
  else
    args="$@"
  fi
  
  largs=$(log_get_args $@)
  # parse the incoming flags from args to serialize as 
  # config to allow variable interpolation
  envconfig="$(pkg_args_to_config $args)"
  envconfig=$(printf  '%s\n%s %s' "$envconfig" "cmakeargs" "$CMAKE_ARGS")
  envconfig=$(printf  '%s\n%s %s' "$envconfig" "configargs" "$CONFIG_ARGS")
  tokens="$(awk 'NR==1{printf "%s",$1}; NR>1{printf "|%s",$1}' <<< "$envconfig")"
  log $largs "env tokens detected: $(tr '|' ' ' <<< "$tokens")"
  
  while IFS= read -r line || [ -n "$line" ]; do
    # ensure one space at least for those lines which are not tokens
    line="$(sed -e 's/^[[:space:]][[:space:]]*/ /' <<< "$line")"
    if [ -z "$line" ] || [[ "$line" =~ ^[:space:]*# ]]; then 
      #ignore comments or empty lines
      continue
    elif [[ $line =~ ^(\[([a-z0-9_-]+)\])$ ]]; then
      if [ ! -z $pkgname ]; then         
        # add newline at the end for sanitize block
        if ! echo -ne "$pkgconfig"| pkg_build_install $pkgname $tokens $largs; then
          exit 1
        fi
      fi
      skip_os= ; pkgconfig="$envconfig" ; pkgname=${BASH_REMATCH[2]}
      log $largs "detected config for $pkgname"
    elif [[ $line =~ ^(\(([darwin|linux]+)\))$ ]]; then
      log $largs "detected match os expresion for ${BASH_REMATCH[2]}"
      # set flag skip nexts lines until other os tag is detected and matched
      [[ ${BASH_REMATCH[2]} != $HOST_OS ]] && skip_os=1 || skip_os=
    elif [[ -z $skip_os ]]; then
      if [ -z "$pkgconfig" ]; then 
        pkgconfig="$(printf '%s\n' "$line")"
      else
        pkgconfig="$(printf '%s\n%s' "$pkgconfig" "$line")"
      fi
    else
      log $largs "skipping config line $line"
    fi
  done < <(cat $fd)

  if [ ! -z $pkgname ]; then
    if ! echo -ne "$pkgconfig" | pkg_build_install $pkgname $tokens $largs; then
      exit 1
    fi
  fi
}

pkg_build_install() {
  local fd args tokens \
        pkgname pkgconfig 
  local largs=$(log_get_args $@)
  local dryrun=$(is_flag_present --dry-run $@)

  if [ -t 0 ] || [ -e "$1" ]; then
    fd="$1"
    pkgname="$2"
    tokens="$3"
  else
    pkgname="$1"
    tokens="$2"
  fi
  
  if [ -z "$pkgname" ]; then
    log $largs --err "Empty package name\n" 
    log_errexit "The process can't continue due a package name must be provided"
  fi
  
  pkgconfig="$(cat $fd)"
  
  local prefix="$(pkg_config_read_value prefix $tokens <<<"$pkgconfig")"
  local tempdir="$(pkg_config_read_value tempdir $tokens <<<"$pkgconfig")"
  local sourcedir="$tempdir/${pkgname}_src"
  local builddir="$sourcedir/build"
  
  if [ -z "$tempdir" ]; then
    log $largs --err "Temporary directory must be defined" 
    log_errexit "The process can't continue due a temporary diretory must be provided"
  fi

  if [ ! -d "$tempdir" ]; then
    log $largs --err "Temporary directory must exists" 
    log_errexit "The process can't continue due a temporary diretory is not exist check $tempdir"
  fi

  # extends config with the current context
  tokens="builddir|sourcedir|$tokens"
  # define builddir and sourcedir on top
  pkgconfig="$(printf '%s %s\n%s' "builddir" "$builddir" "$pkgconfig")"
  pkgconfig="$(printf '%s %s\n%s' "sourcedir" "$sourcedir" "$pkgconfig")"
  pkgconfig="$(pkg_config_interpolate $tokens <<< "$pkgconfig")"
  
  # create a custom function to extract the values from pkgconfig
  eval $"function pkg_config_block_read_value() {
    pkg_config_read_value \"\$1\" "\"\$tokens\"" <<< "\"\$pkgconfig\"";
  }"

  local url="$(pkg_config_block_read_value url)"
  local filecheck="$(pkg_config_block_read_value filecheck)"
  local desc="$(pkg_config_block_read_value desc)"
  local filename="${url##*/}"
  local extension=${url##*.}

  log $largs --header "Install $pkgname - $desc"
  
  log $largs <(echo -ne "config details:\n$(echo -ne "$pkgconfig"|sed -e 's/^/-> /')")
  
  if [ -z "$filecheck" ]; then
    log $largs --wrn "imposible to verify if is installed, check the configuration"
    sleep 2
  fi

  if [ -z "$filecheck" ] || ! eval ls $filecheck &>/dev/null; then
    log $largs "using temporary directory $tempdir"
    log_pushd $largs "$tempdir"
    
    log $largs "using toolchain directory $prefix"
    mkdir -p "$prefix"
    
    if [ ! -d $sourcedir ]; then
      if [ "$extension" == "git" ]; then
        pkg_clone $largs $sourcedir
      elif [ ! -f $filename ]; then 
        pkg_download $largs $filename
      fi
    fi
    
    if [ ! -d $sourcedir ] && [[ $extension == *"z"* ]]; then
      pkg_verify_checksum $largs $filename
      pkg_unpack $filename $sourcedir $largs
    fi
    
    log_pushd $largs "$sourcedir"
    pkg_patch $largs
    pkg_configure $largs
    pkg_build $largs
    pkg_install $largs
    pkg_testspec $largs
  elif [ ! -z "$filecheck" ]; then
    log $largs --ok "already installed $filecheck"    
  fi

  pkg_check $largs
}

pkg_clone() {
  local largs=$(log_get_args $@)
  local args=$(log_exclude_args $@)
  local url="$(pkg_config_block_read_value url)"
  local hash="$(pkg_config_block_read_value hash)"
  local branch="$(pkg_config_block_read_value branch)"
  set -- $args
  if [ ! -z $branch ]; then 
    args=" --single-branch --branch $branch"
  fi
  
  log_wrap_process $largs "fetch sourcedir from $url" -- git clone $url $1 ${@:2}

  if [ ! -z $hash ]; then 
    log_pushd $largs $1
    log_wrap_process $largs "checking out hash $hash" -- git checkout $hash
    log_popd $largs
  fi
}

pkg_download() {
  local largs=$(log_get_args $@)
  local args=$(log_exclude_args $@)
  local url="$(pkg_config_block_read_value url)"
  local exit_code=0
  set -- $args
  
  trap "echo -ne >&2 '\n\nAborting, removing $1\n\n'; rm -f $1; exit 1" INT
  log_wrap_process $largs --no-exit --strip 1 "download $1" -- wget \
    --no-clobber \
    --quiet \
    --show-progress \
    --progress=bar:force \
    --output-document=$1 \
    "${@:2}" \
    $url

  exit_code=$?

  if [ $exit_code -eq 4 ]; then
    log $largs --wrn "Some problems trying reach the $url by the connection, stil alive :)"
  elif [ ! $exit_code -eq 0 ]; then
    log $largs --err "download $1"
    log_errexit "Failed to download the file from $url"
  fi
}

pkg_verify_checksum() {
  local sha256="$(pkg_config_block_read_value sha256)"
  local largs=$(log_get_args $@)
  local args=$(log_exclude_args $@)
  local dryrun=$(is_flag_present --dry-run $@)

  if [ -z $sha256 ]; then
    return 0
  fi

  set -- $args
  local cmd="shasum -a 256 $1 | awk '{ print \$1}'"

  if [ ! -z $dryrun ]; then
    echo $cmd
    return 0
  fi
  local checksum=$(eval $cmd)
  if [[ $checksum = $sha256 ]]; then
    log --ok $largs "check sha256sum $checksum"
  else
    log --err $largs "check sha256sum $checksum"
    log_errexit $largs <(cat <<-EOF
Wrong signature

  Actual: $checksum
  Expected: $sha256

File integrity can be compromised, usually referred to as the file becoming corrupted. 
A file can become corrupted by a variety of ways: faulty storage media, errors in transmission, 
write errors during copying or moving, software bugs, and so on.

https://en.wikipedia.org/wiki/File_verification

EOF
)
  fi
}

pkg_unpack() {
  local largs=$(log_get_args $@)
  local logfile=$(log_get_args_logfile $@)
  local args=$(log_exclude_args $@)
  local dryrun=$(is_flag_present --dry-run $@)
  local integrity
  set -- $args

  if [ -z $dryrun ]; then
    while IFS= read -r line; do
      integrity=1
      break;
    done < <(tar -tf $1 2> $logfile)

    if [ -z $integrity ]; then
      log $largs --err "Error file integrity"
      log_errexit $largs <(cat <<-EOF
Error file integrity $1
  This file has not a valid format
  please consider remove this file using 
    
    rm $(pwd)/$1
EOF
)
    fi
  fi

  log_wrap $largs -- mkdir -p $2
  log_pushd $largs $2
  trap "echo -ne >&2 '\n\nAborting, removing $2\n\n'; rm -rf $2; exit 1" INT
  if ! log_wrap_process $largs --strip 2 "unpack $1" -- \
      tar v --strip-components 1 -xf "../$1" ; then
    log_popd $largs
    log_wrap $largs -- rm -rf $2
  else
    log_popd $largs
  fi
}

pkg_patch() {
  local patchfile url wgetargs
  local largs=$(log_get_args $@)
  local args="$(log_exclude_args $@)"
  local patchesdir="$(pkg_config_block_read_value patchesdir)"
  local patches="$(pkg_config_block_read_value patches)"
  local prepatch="$(pkg_config_block_read_value prepatch)"
  local postpatch="$(pkg_config_block_read_value postpatch)"
  local dryrun=$(is_flag_present --dry-run $@)
  local strip=0

  if [ ! -z "$prepatch" ]; then
    log_wrap_process $largs "pre-patch" -- <(echo -ne "$prepatch")
  fi

  for patchfile in $patches; do
    if [[ "$patchfile" =~ ^p([0-9]): ]]; then
      strip="${BASH_REMATCH[1]}"
      patchfile="${patchfile#*"${BASH_REMATCH[0]}"}"
    fi
    
    if [[ "$patchfile" =~ ^(ftp|http)s?:// ]]; then
      url="$patchfile"
      patchfile="${url##*/}"
      if [[ "$patchfile" =~ \.zip$ ]]; then
        wgetargs="| zcat"
        patchfile="$(basename "$patchfile" .zip)"
      fi
      if [ ! -f "$patchfile" ]; then
        log_wrap $largs --strip 1 -- "wget \
          -O -
          --no-clobber \
          --quiet \
          --show-progress \
          --progress=bar:force \
          $url \
          $wgetargs \
          > "$patchfile""
      fi
    fi
    
    if [ -d "$patchesdir" ] && [ -f "$patchesdir/$patchfile" ]; then
      patchfile="$(realpath $patchesdir/$patchfile)"
    fi
    # # ensure the file exists
    # for filetopatch in lsdiff $patchfile; do
    #   if [ ! -z $dryrun ]; then
    #     echo "touch $filetopatch"
    #   else
    #     touch $filetopatch
    #   fi
    # done

    if [ ! -z $dryrun ]; then
      echo "patch -p$strip -Nb < $patchfile"
    else
      if ! patch -R -p$strip -s -f --dry-run < $patchfile &>/dev/null; then
        if patch -p$strip -Nb < $patchfile &>/dev/null; then
          log --ok "Applied patch $patchfile"
        else
          log --err "Error when apply patch $patchfile"
          log_errexit "The process can't continue due a patch couldn't be able to be applied"
        fi
      else
        log --ok "Already patched $patchfile"
      fi
    fi

    if [ ! -z "$postpatch" ]; then
      log_wrap_process $largs "pre-patch" -- <(echo -ne "$postpatch")
    fi
  done
}

pkg_configure() {
  local exit_code=0
  local largs=$(log_get_args $@)
  local args="$(log_exclude_args $@)"
  local builddir="$(pkg_config_block_read_value builddir)"
  local configure="$(pkg_config_block_read_value configure)"
  local configargs="$(pkg_config_block_read_value configargs)"
  local configflags="$(pkg_config_block_read_value configflags)"
  local cmakeargs="$(pkg_config_block_read_value cmakeargs)"
  local cmakeflags="$(pkg_config_block_read_value cmakeflags)"
  local preconfig="$(pkg_config_block_read_value preconfig)"
  local postconfig="$(pkg_config_block_read_value postconfig)"
  local prefix="$(pkg_config_block_read_value prefix)"
  local sysroot="$(pkg_config_block_read_value sysroot)"
  
  if [ ! -z "$prefix" ]; then
    cmakeargs+=" -DCMAKE_INSTALL_PREFIX="$prefix""
    configargs+=" --prefix="$prefix""
  fi

  if [ ! -z "$sysroot" ]; then
    cmakeargs+=" -DCMAKE_SYSROOT="$prefix""
    configargs+=" --with-sysroot="$sysroot""
  fi
  
  if [ ! -z "$preconfig" ]; then
    log_wrap_process $largs "pre-configure" -- <(echo -ne "$preconfig")
  fi
  
  if [ ! -z "$configure" ]; then 
    log_wrap_process $largs "configure" -- <(echo -ne "$configure")
  elif type cmake &>/dev/null && [ -f CMakeLists.txt ]; then
    log_wrap $largs -- mkdir -p "$builddir"
    log_pushd $largs "$builddir"
    log_wrap_process $largs "configure" -- \
      cmake .. \
        "$cmakeargs" \
        "$cmakeflags"
        
    exit_code=$?
    log_popd $largs
  elif [ -f configure ]; then
    mkdir -p "$builddir"
    log_pushd $largs "$builddir"
    log_wrap_process $largs "configure" -- \
      ../configure \
      "$configargs" \
      "$configflags"
    exit_code=$?
    log_popd $largs
  fi

  if [ ! -z "$postconfig" ]; then
    log_wrap_process $largs "post configure" -- <(echo -ne "$postconfig") 
  fi

  return $exit_code
}

pkg_build() {
  local largs=$(log_get_args $@)
  local builddir="$(pkg_config_block_read_value builddir)"
  local prebuild="$(pkg_config_block_read_value prebuild)"
  local postbuild="$(pkg_config_block_read_value postbuild)"
  local build="$(pkg_config_block_read_value build)"
  local nproc=$(type nproc &> /dev/null && nproc || sysctl -n hw.ncpu)

  if [ ! -z "$prebuild" ]; then
    log_wrap_process $largs "pre-build" -- <(echo -ne "$prebuild")
  fi

  if [ ! -z "$build" ]; then
    log_wrap_process $largs "build" -- <(echo -ne "$build")
  elif [ -f "$builddir/Makefile" ]; then
    log_pushd $largs "$builddir"
    log_wrap_process $largs "build" -- make -j$nproc
    log_popd $largs
  elif [ -f Makefile ]; then
    log_wrap_process $largs "build" -- make -j$nproc
  fi  

  if [ ! -z "$postbuild" ]; then
    log_wrap_process $largs "post-build" -- <(echo -ne "$postbuild")
  fi
}

pkg_install() {
  local largs=$(log_get_args $@)
  local builddir="$(pkg_config_block_read_value builddir)"
  local preinstall="$(pkg_config_block_read_value preinstall)"
  local postinstall="$(pkg_config_block_read_value postinstall)"
  local installflags="$(pkg_config_block_read_value installflags)"
  local install="$(pkg_config_block_read_value install)"
  local filecheck="$(pkg_config_block_read_value filecheck)"
  local prefix="$(realpath $(pkg_config_block_read_value prefix))"

  if [ ! -z "$preinstall" ]; then
    log_wrap_process $largs "pre-install" -- <(echo -ne "$preinstall")
  fi

  if [ ! -z "$install" ]; then
    log_wrap_process $largs "install" -- <(echo -ne "$install")
  elif [ -f "$builddir/Makefile" ]; then
    log_pushd $largs "$builddir"
    log_wrap_process $largs "install" -- make install "$(echo -ne $installflags)"
    log_popd $largs
  elif [ -f Makefile ]; then
    log_wrap_process $largs "install" -- make install "$(echo -ne $installflags)"
  elif ls bin &>/dev/null || ls lib &>/dev/null; then
    log_wrap_process $largs "install" -- $(os_get_bin_path rsync) \
      --ignore-missing-args \
      -vrzLR {bin,lib,include} "$prefix/"
  else
    log $largs --err "Nothing detected to install"
    log_errexit $largs "The process has stopped due there's no strategy found to install this package"
  fi

  if [ ! -z "$postinstall" ]; then
    log_wrap_process $largs "post-install" -- <(echo -ne "$postinstall")
  fi

  if [ ! -z "$filecheck" ] && ! eval ls $filecheck &>/dev/null; then
    log $largs --err --ret "the installation is not completed check $filecheck"
    return 0
  fi
}

pkg_testspec() {
  local largs=$(log_get_args $@)
  local testspec="$(pkg_config_block_read_value testspec)"
  if [ ! -z "$testspec" ]; then
    log_wrap_process $largs "testing" -- <(echo -ne "$testspec")
  fi
}

pkg_check() {
  local largs=$(log_get_args $@)
  local pkgcheck="$(pkg_config_block_read_value pkgcheck)"
  if [ ! -z "$pkgcheck" ]; then
    log_wrap_process $largs "check" -- <(echo -ne "$pkgcheck")
  fi
}