#!/usr/bin/env bash

SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

source "$SCRIPT_DIR/common"

ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"
COL_BLUE=$ESC_SEQ"34;01m"
COL_MAGENTA=$ESC_SEQ"35;01m"
COL_CYAN=$ESC_SEQ"36;01m"
# TABLE=<<-EOF
# --err error $COL_RED 1
# --ok ok $COL_GREEN 1
# --wrn warn $COL_YELLOW 1
# --header false $COL_GREEN 1
# EOF

log() {
  local label
  local msg
  local color
  local cols=$(tput cols)
  local largs=$(log_get_args $@)
  local msg=$(log_get_args_label "$@") 
  local logfile=$(log_get_args_logfile $@)
  local verbose=$(log_get_args_has_flag --verbose $@) 
  local dryrun=$(log_get_args_has_flag --dry-run $@) 
  local spintim
  local ret=$(log_get_args_has_flag --ret $@) 
  local showverb noformat
  
  set -- $largs
  while [[ $# -gt 0 ]]; do
    case $1 in
      --err)
        label="error"
        color=$COL_RED
        showverb=1
        shift 1
        ;;
      --ok)
        label="ok"
        color=$COL_GREEN
        showverb=1
        shift 1
        ;;
      --prg:*)
        ret=1
        label=${1//--prg:/}
        color=$COL_YELLOW
        showverb=1
        shift 1
        ;;
      --spinner)
        ret=1
        spintim=$(($(date +%s) % 3))
        label=$(printf "%$(( spintim + 1 ))s-%$(( 3 - spintim ))s" " ")
        color=$COL_YELLOW
        showverb=1
        noformat=1
        shift 1
        ;;
      --wrn)
        label="warn"
        color=$COL_YELLOW
        showverb=1
        shift 1
        ;;
      --header)
        color=$COL_BLUE
        showverb=1
        shift 1
        ;;
      *)
        shift 1
      ;;
    esac
  done
  
  if [[ "$msg" == "/"* ]] && [ -e "$msg" ]; then
    msg="$(cat $msg)"
  fi

  if [ ! -z $showverb ]; then
    # sanitize message
    # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~
    msg=$(tr -cd '[:alnum:][:blank:][:space:]\!#%&"()*+,-./:;<=>[]@^_`{|}~' <<< "$msg")
    # limited to terminal width 
    msg="\033[K${msg:0:$((cols - 10))}"
  fi

  echo -ne "$msg\n" >> $logfile
  
  if [ -z $noformat ]; then
    label=$(printf "%5s" $label)
  fi

  if [ -z $label ]; then
    if [ ! -z $color ]; then
      msg="$color$msg$COL_RESET"
    fi
  else
    if [ -z $color ]; then
      msg="[ $label ] $msg"
    else
      msg="[ $color$label$COL_RESET ] $msg"
    fi
  fi

  if [ ! -z $verbose ] || [[ ! -z $showverb && -z $dryrun ]]; then
    if [ ! -z $ret  ]; then
      echo -en >&2 "$msg\r"
    else
      echo -en >&2 "$msg\n"
    fi
  fi

  return 0
}

log_init() {
  mkdir -p "$(dirname $1)"
  log --logfile $1 "Using logfile $1"
  echo "" > "$1"
}

log_wrap() {
  local exit_code=0
  local cmd="$(log_wrap_get_cmd_args $@)"
  local largs="$(log_get_args $@)"
  local logfile=$(log_get_args_logfile $@)
  local verbose=$(log_get_args_has_flag --verbose $@)
  local show=$(log_get_args_has_flag --show $@)
  local dryrun=$(log_get_args_has_flag --dry-run $@)

  if [ ! -z $dryrun ]; then
    if is_fd "$cmd"; then
      cmd="$(cat $cmd)"
    fi
    echo -ne "$cmd\n"
    return 0
  fi
  echo -ne "" > /tmp/cmd
  echo -ne "" > /tmp/stderr
  echo -ne "" > /tmp/stdout
  if is_fd "$cmd"; then
    cat "$cmd" \
    | while IFS= read -r line || [ -n "$line" ]; do 
      echo "$line" >> /tmp/cmd
      echo "$line"
    done \
    | bash -e 2>/tmp/stderr \
    | while IFS= read -r line; do
      echo "$line" >> /tmp/stdout
      if [ ! -z $show ] || [ ! -z $verbose ]; then
        echo "$line"
      fi
      echo "$line" >>$logfile
    done 
    exit_code=${PIPESTATUS[2]}
  else
    log $largs "wrapping command: $cmd"
    echo -ne "$cmd" >> /tmp/cmd
    bash -e -c "$cmd" 2>/tmp/stderr | while IFS= read -r line; do
      if [ ! -z $show ] || [ ! -z $verbose ]; then
        echo $line
      fi
      echo $line >>$logfile
    done
    exit_code=${PIPESTATUS[0]}
  fi
  

  if [[ ! $exit_code -eq 0 ]]; then 
    log_errexit $largs <(log_errsummary)
  fi

  return $exit_code
}

log_wrap_process() {  
  local exit_code=0
  local cmd="$(log_wrap_get_cmd_args "$@")"
  local largs="$(log_get_args "$@")"
  local label=$(log_get_args_label "$@")
  local dryrun=$(log_get_args_has_flag --dry-run $@)
  local noexit=$(log_get_args_has_flag --no-exit $@)
  
  if [ ! -z $dryrun ]; then
    log_wrap $largs -- "$cmd"
    return $?
  fi

  log_wrap $largs --show --no-exit -- "$cmd" | \
  while IFS= read -r line; do
    log $largs --spinner "-> $line"
  done
  
  exit_code=${PIPESTATUS[0]}


  if [ $exit_code -eq 0 ]; then 
    log $largs --ok "$label"
  else
    if [ ! -z $noexit ]; then
      log $largs --warn "$label"
    else
      log $largs --err "$label"
      log_errexit $largs <(log_errsummary)
    fi
  fi

  return $exit_code
}


log_wrap_progress() {
  local count=0 exit_code=0
  local cmd="$(log_wrap_get_cmd_args "$@")"
  local label=$(log_get_args_label $@)
  local largs=$(log_get_args $@)
  local regexp="[0-9]+%"
  local strip=$(fallback $(log_get_args_flag_value --strip $@) 0)
  local total=$(fallback $(log_get_args_flag_value --total $@) 0)
  local dryrun=$(log_get_args_has_flag --dry-run $@) 
  local noexit=$(log_get_args_has_flag --no-exit $@)
  local prg=0
  local cr=$'\r' nl=$'\n'
  local line
  
  if [ ! -z $dryrun ]; then
    log_wrap $largs -- "$cmd"
    return $?
  fi
  
  log_wrap --show $largs -- $cmd 2>&1 |\
  while IFS='' read -d '' -rn 1 c; do
    if [[ $c == $cr || $c == $nl ]]; then 
      if [[ $line =~ $regexp ]]; then 
        prg=${BASH_REMATCH[0]}
      elif [[ ! $total == "0" ]]; then
        prg="$(echo "x = $count / $total * 100; scale = 0; x / 1" | bc -l)%"
      else
        count=$((count+1))
        prg=$count
      fi
      log $largs "--prg:$prg" "$label ${line:$strip}"
      line=""
    fi
    line+=$c
  done

  exit_code=${PIPESTATUS[0]}
  
  if [ $exit_code -eq 0 ]; then
    log $largs --ok "$label"
  else
    if [ ! -z $noexit ]; then
      log $largs --warn "$label"
    else
      log $largs --err "$label"
      log_errexit $largs <(cat $stderr)
    fi
  fi

  return $exit_code
}

log_get_args_flag_value() {
  echo "$(get_flag_value $1 $(log_get_args ${@:2}))"
}

log_get_args_has_flag() {
  echo "$(is_flag_present $1 $(log_get_args ${@:2}))"
}

log_get_args_logfile() {
  local logfile="$(log_get_args_flag_value --logfile $@)"
  if [ -z $logfile ]; then
    echo "/dev/null"
  fi
  echo "$logfile"
}

log_wrap_get_cmd_args() {
  echo "$@" | awk -F' \\-\\- ' '{print $2}' 
}

log_get_args() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      --logfile|--strip|--total)
        echo -ne " $1 $2"
        shift 2
      ;;
      --verbose|--dry-run|--no-exit|--ret|\
      --show|--err|--ok|--prg:*|\
      --wrn|--header|--spinner)
        echo -ne " $1"
        shift 1
      ;;
      *)
        shift 1
      ;;
    esac
  done
}

log_exclude_args() {
  local args
  while [[ $# -gt 0 ]]; do
    case $1 in
      --logfile|--strip|--total)
        shift 2
      ;;
      --verbose|--dry-run|--no-exit|--ret|\
      --show|--err|--ok|--prg:*|\
      --wrn|--header|--spinner)
        shift 1
      ;;
      *)
        args+=" $1"
        shift 1
      ;;
    esac
  done

  echo "${args:1}"
}

log_get_args_label() {  
  local label
  while [[ $# -gt 0 ]]; do
    case $1 in
      --logfile|--strip|--total)
        shift 2
      ;;
      --verbose|--dry-run|--no-exit|--ret|\
      --show|--err|--ok|--prg:*|\
      --wrn|--header|--spinner)
        shift 1
      ;;
      --)
        break
      ;;
      *)
        label+=" $1"
        shift 1
      ;;
    esac
  done

  echo ${label:1}
}

log_errexit() {
  local info
  local infoheader
  local logfile=$(log_get_args_logfile $@)
  local info=$(log_get_args_label $@)
  local noexit=$(log_get_args_has_flag --no-exit $@)
  
  if [ ! -z $noexit ]; then
    return 0
  fi

  if [ -e "$info" ]; then
    info="$(cat $info)"
  fi
  
  if [ -f $logfile ]; then
    extrainfo=$(cat <<-EOF
Check the logfile \e]8;;$logfile\e]8;;\e\\ to see more information:

$(tail -n5 $logfile|sed -e 's/^/-> /')
EOF
)
  fi

  echo >&2 -ne "$(cat <<-EOF

Something wrong happend!! This may help you

$info

$extrainfo

$(log_stacktrace)
\n
EOF
)"
  exit 1
}

log_stacktrace() {
  set +o xtrace
  # Print out the stack trace described by $function_stack  
  echo "Stack trace:"
  for ((i=1;i<${#FUNCNAME[@]}-1;i++))
  do
    echo -ne " $COL_RED$i$COL_RESET: ${BASH_SOURCE[$i+1]}:${BASH_LINENO[$i]} $COL_GREEN${FUNCNAME[$i]}$COL_RESET(...)\n"
  done
}

log_pushd() {
    local largs=$(log_get_args $@)
    local dryrun=$(log_get_args_has_flag --dry-run $@) 
    local args=$(log_exclude_args $@) 
    set -- "$args"
    local dirname="$1"
    DIR_STACK="$dirname ${DIR_STACK:-$PWD}"
    if [ -z $dryrun ]; then
      cd "${dirname:?"missing directory name."}"
    fi
    log $largs "current dir stack $DIR_STACK"
}
   
log_popd() {
    local largs=$(log_get_args $@)
    local dryrun=$(log_get_args_has_flag --dry-run $@) 
    DIR_STACK="${DIR_STACK#* }"
    if [ -z $dryrun ]; then
      cd "${DIR_STACK%% *}"
    fi
    log $largs "current dir: $PWD"
}

log_errsummary() {
  cat <<-EOF
Execution failed
  ${COL_BLUE}Directory${COL_RESET}: 
  $(pwd)
  ${COL_BLUE}Command${COL_RESET}: 
$(tail -n20 /tmp/cmd|sed -e 's/^/   -> /')
  ${COL_BLUE}Stdout${COL_RESET}: 
$(tail -n20 /tmp/stdout|sed -e 's/^/   -> /')
  ${COL_BLUE}Stderr${COL_RESET}: 
$(tail -n20 /tmp/stderr|sed -e 's/^/   -> /')

EOF
}