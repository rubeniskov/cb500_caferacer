#!/usr/bin/env bash

SCRIPT_SHELL_NAME="$0"
SCRIPT_SHELL_ARGS="$@"
SCRIPT_SHELL_FILENAME="$(basename $0)"
SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

source "$SCRIPT_DIR/log"

DIR_TOOLCHAIN_BIN="$DIR_TOOLCHAIN/bin"
LOGFILE="$(pwd)/$SCRIPT_SHELL_FILENAME.log"

largs=$(log_get_args $@)

set -- $(log_exclude_args $@)

if [ ! -t 0 ] || [ -e "$1" ]; then
  requirements=$(cat $1)
else
  requirements="$@"  
fi

log --header "Checking pkg manager for this os system $HOST_OS" 

case $HOST_OS in
  darwin)
    xcode-select --install 2> /dev/null
    
    if ! type brew > /dev/null; then
      log_wrap_process $args "installing brew" -- /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" 
    else
      log $args --ok "brew is already installed"
    fi
  ;;
  linux)
    if [[ "$EUID" -eq 0 ]]; then
      log_wrap_process $args "update pkg list" -- apt-get update
    else
      log_wrap_process $args "update pkg list" -- sudo apt-get update
    fi
  ;;
  *) 
    log_errexit $args "Invalid operating system $os"
  ;;
esac 

log --header "Checking minimum requirements" 

while read -r req; do
  set -- $req
  if [ ! -z "$2" ] && [[ "$2" != $HOST_OS ]]; then
    log "skip $1 installation not matchin with this platform"
    continue
  fi
  req_chunks=$(echo $1 | sed -e 's/\([><=]\)/ \1 /g')
  
  set -- $req_chunks
  if ! $(os_dry_check_pkg) $1 &>/dev/null; then
    if ! log_wrap_process $args "install $1 " -- $(os_dry_install_pkg) $1; then
      return 1
    fi
  elif [[ ! -z "$2" ]]; then
    curv=$(os_pkg_version $1)
    if semver "$3 $2 $curv" ; then
      log $args "Seems you have an old $1@$curv version... \
      and need $1$2$3 so it will install such version" 
      log_wrap_process $args "install $1$2$3" -- $(os_dry_install_pkg) $1
    else
      log $args --ok "$1 is already installed with the right version $3"
    fi
  else
    log $args --ok "$1 is already installed"
  fi
done <<< "$requirements"